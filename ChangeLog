2001-06-23  Scott S. Goodwin  <scott@scottg.net>

	* tclcmds.h, tclcmds.c: added struct to hold list of Tcl commands
	to create and made the creation process loop over all the commands
	and create them.

	* init.c: rewrote SetProtocols to allow the protocols to be set on
	one line in nsd.tcl. Added protocols and cipherSuite to structs.

2001-06-16  Scott S. Goodwin  <scott@scottg.net>

	* init.c, nsopenssl.h: cleaned up InitSessionCache.

	* init.c, nsopenssl.h: enormous changes to support client
	connections. Started moving a lot of the config options into the
	Driver structures so they are passed to things like LoadKey
	etc. Both client and server use most of the same functions such as
	LoadKey, LoadCertificate, etc. Created NsOpenSSLContext as a
	"view" into the public parts of NsServerSSLDriver and
	NsClientSSLDriver.

2001-06-15  Scott S. Goodwin  <scott@scottg.net>

	* all: changed define names for server
	(i.e. CONFIG_CIPHERSUITE became CONFIG_SERVER_CIPHERSUITE). Added
	defines for the upcoming client code. Got the SSL_CTX for the
	client working via ClientMakeContext. Added
	ClientVerifyServerCallback routine, NsClientSSLTrace routine.

	* readme.txt: updated.

	* init.c, nsopenssl.c, nsopenssl.h, ssl.c: created
	NsOpenSSLModuleData structure to hold the data about the module
	that is common between client and server functions. Pulled this
	data out of the NsServerSSLDriver and NsClientSSLDriver
	struct. Changed all references like sdPtr->module to be
	sdPtr->module->name.

	* init.c: changed ServerLoadCertificate to look for a certificate
	chain after the server's certificate. Simply append all of the
	certs in the chain to the end of the server cert file. Having a
	chain is optional.

2001-06-13  Scott S. Goodwin  <scott@scottg.net>

	* init.c: added NsClientSSLCreateDriver and NsClientSSLFreeDriver.

	* init.c, nsopenssl.h: moved OpenSSL initialization out of
	NsServerCreateDriver to the new NsInitOpenSSL function.

	* init.c, nsopenssl.c, nsopenssl.h: changed NsOpenSSLCreateDriver
	to NsServerSSLCreateDriver and NsOpenSSLFreeDriver to
	NsServerSSLFreeDriver.

	* nsopenssl.c: added NsClientSSLConnection and NsClientSSLDriver
	structs (I know, the client stuff doesn't need a driver; I'll work
	that issue later.)

	* all: changed NsOpenSSLConnection struct name to
	NsServerSSLConnection and NsOpenSSLDriver to NsServerSSLDriver in
	preparation for adding client structures.

2001-06-12  Scott S. Goodwin  <scott@scottg.net>

	* init.c, nsopenssl.c, nsopenssl.h: prefixed static functions that
	are server-specific with "Server", and replaced "NsOpenSSL" with
	"NsServerSSL" to make room for the upcoming client functions,
	which will be called "NsClientSSL".

	* nsopenssl-client-test.htm: added this file to test connectivity
	for the nsopenssl client code.

	* Makefile: removed old CLIENTVERIFY test preprocessor stuff.

	* all: changed #ifdef AS3 to #ifndef NS_MAJOR_VERSION. This means
	it now compiles for AOLserver 3.x by default, since
	NS_MAJOR_VERSION doesn't even exist in 4.x yet.

	* nsopenssl.h: Added code to define the OpenSSL library in use by
	pulling the OPENSSL_VERSION_NUMBER from the source.

2001-06-08  Scott S. Goodwin  <scott@scottg.net>

	* init.c: added SSL_CTX_set_session_id_context call and
	s_server_session_id_context integer. If session caching is on
	(which it is by default) and clientverify is also on (which it is
	not by default) all connections after the first for a particular
	session fail as OpenSSL gets confused. Setting the
	session_id_context fixes this problem. NOTE: if you run more than
	one nsopenssl module on the same server, both of those modules
	will be calling the exact same OpenSSL functions (from the module
	that was loaded first). In such a case, the session_id_context
	integer may have to be different for each of the loaded modules.

	* init.c: removed unused InitSession prototype.

2001-05-22  Scott S. Goodwin  <scott@scottg.net>

	* tclcmds.c: cleaned up NsOpenSSLGetConn (had to change the
	aolserver 4.x core server to put back Ns_ConnDriverContext, which
	was always returning NULL);

2001-05-18  Scott S. Goodwin  <scott@scottg.net>

        * init.c, nsopenssl.c, ssl.c, tclcmds.c, Makefile: integrated
        changes from Jim Davidson and Kris Rehberg to make nsopenssl work
        with AOLserver 4.x's new communication API. 3.x-specific code is
        wrapped with '#ifdef AS3' everywhere it needs to be. nsopenssl at
        this point defaults to compiling for 4.x. To make it compile with
        AOLserver 3.x, do the following:

        make OPENSSL=/path/to/installed/openssl AS3=1

        I'll try to find an automatic way of determining which version of
        AOLserver to compile for, probably by having the Makefile look at
        NSD_VERSION.

2001-05-14  Scott S. Goodwin  <scott@scottg.net>

	* init.c: added more informative error message when the private
	key fails to be loaded. Essentially tells the user that the
	private key may be passphrase protected, and outputs on example
	openssl command that'll take off the passphrase.
 
2001-05-05  Scott S. Goodwin  <scott@scottg.net>

	* nsopenssl 1.1 released.
 
2001-05-04  Scott S. Goodwin  <scott@scottg.net>

	* ssl.c: Now checking for errors returned by BIO_flush in
	NsOpenSSLFlush; we don't return an error though from the function
	though, we just report it in the log.

	* init.c, config.h: made seedbytes a config parameter, which
	allows you to set the number of bytes that will be used to seed
	the PRNG.

2001-05-03  Scott S. Goodwin  <scott@scottg.net>

	* test.adp: renamed test.adp to nsopenssl-tests.adp.

	* init.c: cleanup code; moved PRNG functions to bottom;
	cleaned up NsOpenSSLInitSessionCache.

2001-05-01  Scott S. Goodwin  <scott@scottg.net>

	* init.c: Solaris problem: SeedPRNG failed because I wasn't
	adding enough randomness; I bumped up the number of bytes
	from 16 to 1024 and it's working now. Yay!

2001-04-30  Scott S. Goodwin  <scott@scottg.net>

	* nsd.tcl: added ns_param RandomFile.
	
	* 40-bit export browsers now work!!! The recent changes you see
	were to fix problems with 40-bit export browsers, which could not
	connect when your server certificate had 1024 public key (which
	most if not all server certs do).

	* TODO: added link to nsopenssl release info on my site.

	* tclcmds.c, test.adp: Added new Tcl commands to report protocol
	and cipher name, strength:

	   ns_openssl protocol
	   ns_openssl cipher name
	   ns_openssl cipher strength

	* init.c: initialized sdPtr->randomFile from the RandomFile
	nsd.tcl parameter in NsOpenSSLCreateDriver(). Added
	AddEntropyFromRandomFile(), PRNGIsSeeded(), SeedPRNG() and
	IssueTmpRSAKey().

	* config.h: added CONFIG_RANDOM parameter; uses "RandomFile" in
	nsd.tcl to allow you to specify a file to use as a source of
	random bits for seeding the PRNG.

	* config.c: modified ConfigPathDefault to allow NULL as a default.

	* nsopenssl.h: removed Ns_Cache pointer from nsopenssl driver
	structure. Added pointer to file specified with the RandomFile
	parameter.

2001-04-17  scottg  <scott@scottg.net>

	* TODO: Updated.

        * config.h: Session caching is now on by default.
	
	* Makefile: Updated to reflect absence of cache.c.
	
	* cache.c, cache.h: Removed these files. See item below.
	
	* init.c, cache.c: Moved NsOpenSSLInitSessionCache from cache.c to
	init.c and removed the callback setups. We don't need to use our
	own caching mechanism; OpenSSL already has one
	built-in. Apparently when the nsopenssl module was created, it was
	based on mod_ssl which needs an external, disk-based session
	caching mechanism because Apache isn't multithreaded.

2001-03-12  root  <scott@scottg.net>

	* tclcmds.c: Replaced Ns_GetConn with Ns_TclGetConn. Latest
	AOLserver 4.x no longer offers Ns_GetConn.

2000-12-12  root  <scott@scottg.net>

	* nsopenssl.c: made it a fatal error to bind to a socket already
	in use. What sometimes happens is someone will forget to take out
	nsssl at startup and it'll bind to the https socket
	first. nsopenssl would just log the error but most people would
	assume it was working since they could connect via SSL.

	* sock.c: somehow this file was left lying around. All of these
	functions are in nsopenssl.c, so I removed sock.c.

2000-11-18  root  <scott@scottg.net>

	* nsopenssl.h: changed library version to 0.9.6. Gotta find a way
	to automatically set this based on what version of OpenSSL you
	compile against. Right now, OpenSSL 0.9.6 is required. Shouldn't
	be difficult to make this module work with 0.9.5a if you really
	want.

2000-11-18  root  <scott@scottg.net>

	* production-ready: Although there is still more to do (see below
	and the TODO file), I have done extensive load-testing on RedHat
	6.2 and Debian 2.2 and consider this code to be
	production-ready. Note that I haven't had time to run load tests
	on a Solaris box yet.

	* init.c: fixed LoadCACerts; the CA directory was forced to NULL
	when calling SSL_CTX_load_verify_locations.

	* all: Rob Mayoff has taken the module and really done an
	excellent job of refactoring and cleaning it up. Most notable changes:

	Extensive reformatting to bring code (mostly) in line with
	AOLserver standards.

        Consolidated structures.  Now there is a single struct
	representing the driver and a single struct for each connection,
	instead of two in each case.

	Driver initialization factored mostly into init.c.

	Implemented timeout during SSL handshake.

	Revised Makefile.  Now detects OPENSSL not set in a way that
	doesn't involve bracketing the whole Makefile in an ifdef.

	I modified the cache code extensively; however, it probably
	doesn't manage reference counts quite right.  See next item
	anyway.

	The cache is disabled by default. This code was (I assume) blindly
	modelled on mod_ssl's cache. The reason mod_ssl needs it is
	because the Apache children don't share one SSL_CTX. Since nsd
	threads do share one SSL_CTX, and the SSL_CTX has its own session
	cache anyway, there's no point in building our own in this way.

	Config utilities in config.c.  All config #defines in config.h.

	Added thread (mutex) callbacks in thread.c.

	If the client sends an invalid certificate, the connection is
	still accepted.  I added a new command, [ns_openssl clientcert
	valid], that returns 1 if the client sent a certificate AND we
	were able to verify it.

2000-11-05  root  <scott@scottg.net>

	* tclcmds.c: added 'ns_openssl clientcert exists' command.

	* readme.txt: updated with Tcl interface and with parameters for
	nsd.tcl.

	* nsopenssl.c: left it in SSL_VERIFY_PEER mode by mistake. It now
	uses the config file parameter ClientVerify properly. Also did
	some cleanup.

	* sock.c: the 'ssl' command has been changed to 'ns_openssl'.

2000-11-04  root  <scott@scottg.net>

	* tclcmds: Changed the tcl command names. All nsopenssl Tcl
	commands now start with 'ssl'; all new commands should also start
	with 'ssl':

          ssl info
          ssl clientcert version
	  ssl clientcert serial
	  ssl clientcert subject
	  ssl clientcert issuer
	  ssl clientcert notbefore
	  ssl clientcert notafter
	  ssl clientcert signature_algorithm
	  ssl clientcert key_algorithm
	  ssl clientcert pem
		
	* nsopenssl.c, sock.c: Moved default ca chain processing from
	nsopenssl.c to sock.c.

	* nsopenssl.c: took out FIONBIO ifdef'd code.

2000-10-30  [ ROOT I ]  <scott@scottg.net>

	* nsd.tcl, nsopenssl.h, nsopenssl.c, sock.c: added CACertPath and
	CACertFile parameters to config file processing; these now get
	passed from nsd.tcl to Ns_SSLCreateServer.

	* nsopenssl.h, nsopenssl.c, sock.c: Created SSLConf data
	structure to hold config parameters that are passed from
	Ns_ModuleInit to Ns_SSLCreateServer. Changed all 'keyfile'
	variable name types to 'config->keyfile'. This seems like
	double-duty since the SSLServer data structure contains some of
	the same information. To get rid of SSLConf we'd have to move the
	code that's currently in Ns_SSLCreateServer into Ns_ModuleInit
	which wouldn't be wise. First, you want to factor out any code you
	can to keep each function as simple as possible. Second, we might
	want to create multiple servers using Ns_SSLCreateServer
	(say for virtual hosting); having it a separate function that you
	pass these parameters to is useful, I think.

2000-10-27  Scott S. Goodwin  <scott@scottg.net>

	* tclcmds.c: added CertInfoCmd which is called in Tcl as:

	  client_cert_info version
	  client_cert_info serial
	  client_cert_info subject
	  client_cert_info issuer
	  client_cert_info notbefore
	  client_cert_info notafter
	  client_cert_info sig_algorithm
	  client_cert_info key_algorithm
	  client_cert_info pem_certificate

	I also added three functions to support the above Tcl commands:
	ValidTime, which is used to return the notbefore and notafter
	strings in the format "Aug 28 20:00:38 2000 GMT"; SerialNumber
	which returns the serial number as a string (serial number is in
	hex); and PEMCertificate, which returns the PEM format of the
	client certificate.

2000-10-25  Scott S. Goodwin  <scott@scottg.net>

	* tclcmds.c: added InfoCmd which returns a true Tcl list with the
	SSL library name (OpenSSL), version (0.9.5a), crypto library name
	(OpenSSL, but could be BSAFE/Crypto-C), and crypto library version
	(0.9.5a). It's called as 'openssl_info' from Tcl (though this may
	change to ssl_info later -- I didn't want to clash with nssock's
	ssl_info Tcl command).

2000-10-24  Scott S. Goodwin  <scott@scottg.net>

	* all: ifdef'd all client verification specific code so they won't
	be included in a normal compile. Eventually all of this code
	should be conditionally run if the config file says to do client
	verification. To use it, set VERIFY_CLIENT=1 as a make argument.

2000-10-23  Scott S. Goodwin  <scott@scottg.net>

	* nsopenssl.c: Went back to "standard" SSL handshaking
	loop. Freddie's explicit select loop *works* better in that it
	allows more connections before it gets balled up (probably due to
	a threading problem) but that problem still exists. I'm still
	learning C, and I'm using the Apache/mod_ssl combo as my
	reference, as well as RSA's SSL-C toolkit, so for now I want to
	use the "standard" method until I can get the other stuff fixed
	and I understand what's going on. I'll then check to see if
	Freddie's changes improve performance without sacrificing
	maintainability across platforms and put it back in.
	
2000-10-17  Scott S. Goodwin  <scott@scottg.net>

	* nsopenssl.c: BIO_free'd conPtr->ssl_bio in
	NsSSLCreateConn. Should I be using SSL_free() here instead???
	Nope, that makes it crash. Ok.

2000-10-13  Scott S. Goodwin  <scott@scottg.net>

	* sock.c: Added protocol parameter parsing in NsModuleInit. You
	specify protocols thusly: "SSLv2, SSLv3, TLSv1, ALL". Case doesn't
	matter, order doesn't matter. Commas are necessary. When the
	protocol parser sees 'ALL', none of the others are parsed (unlike
	Apache -- see the comments in the code).

	* sock.c: Ns_ModuleInit was changing the config file ciphersuite
	parameter in memory -- that's probably a no-no. Now it mallocs if
	the ciphersuite paramater doesn't exist, and strdup's if it does.
	
2000-10-02  Scott S. Goodwin  <scott@scottg.net>

	* .c, .h: replaced all ConfigGet calls with ConfigGetValue;
	ConfigGet is obsolete.

	* debug: Why were we using our own debug variable? I took out all
	of the 'if (debug)' statements so Debug to the log file works like
	the rest of aolserver's debug statements.

2000-09-30  Scott S. Goodwin  <scott@scottg.net>

	* Split Files: I've split the code into four files: nsopenssl.h,
	nsopenssl.c, sock.c and cache.c. Fewer pages to print when all I
	really want to see right now is the SSL portion of the code :)

2000-21-12  Scott S. Goodwin  <scott@scottg.net>

	* logging: Added more debug log statements

2000-09-12  Scott S. Goodwin  <scott@scottg.net>

	* nsopenssl.c: Integrated changes made by Freddie Mendoza
	(avm@satori.com). These included: changed NsSSLRecv and
	NsSSLCreateConn to use OpenSSL BIO routines, added more debugging
	in the SSL negotiations, changes made to make caching work better,
	removed some redundant functions that are now part of the
	AOLserver core. He tested his changes with OpenSSL 0.9.5a and
	0.9.4. I'm using it with 0.9.5a without any problems.

	* Makefile: Added ability to pass BSAFE directory as a parameter
	to make. This allows you to compile OpenSSL with BSAFE. See the
	readme.txt file.

	* readme.txt: Added notes on how to compile with BSAFE.
		
2000-08-20  Kriston J. Rehberg  <Kriston@AOL.NET>

	* readme.txt: Updated build and installation instructions.  Added
	notes about -fPIC and no-asm options when building the OpenSSL
	library.
	
	* Added to $TOP/nsopenssl with new Makefile.
	

